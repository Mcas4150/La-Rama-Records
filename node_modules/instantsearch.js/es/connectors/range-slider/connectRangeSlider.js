var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import find from 'lodash/find';
import _isFinite from 'lodash/isFinite';

import { checkRendering } from '../../lib/utils.js';

var usage = 'Usage:\nvar customRangeSlider = connectRangeSlider(function render(params, isFirstRendering) {\n  // params = {\n  //   refine,\n  //   range,\n  //   start,\n  //   format,\n  //   instantSearchInstance,\n  //   widgetParams,\n  // }\n});\nsearch.addWidget(\n  customRangeSlider({\n    attributeName,\n    [ min ],\n    [ max ],\n    [ precision = 2 ],\n  })\n);\nFull documentation available at https://community.algolia.com/instantsearch.js/connectors/connectRangeSlider.html\n';

/**
 * @typedef {Object} CustomRangeSliderWidgetOptions
 * @property {string} attributeName Name of the attribute for faceting.
 * @property {number} [min = undefined] Minimal slider value, default to automatically computed from the result set.
 * @property {number} [max = undefined] Maximal slider value, default to automatically computed from the result set.
 * @property {number} [precision = 2] Number of digits after decimal point to use.
 */

/**
 * @typedef {Object} RangeSliderRenderingOptions
 * @property {function(Array<number, number>)} refine Sets a range to filter the results on. Both values
 * are optional, and will default to the higher and lower bounds.
 * @property {{min: number, max: number}} range Results bounds without the current range filter.
 * @property {Array<number, number>} start Current numeric bounds of the search.
 * @property {{from: function, to: function}} formatter Transform for the rendering `from` and/or `to` values.
 * Both functions take a `number` as input and should output a `string`.
 * @property {Object} widgetParams All original `CustomRangeSliderWidgetOptions` forwarded to the `renderFn`.
 */

/**
 * **RangeSlider** connector provides the logic to create custom widget that will let
 * the user refine results using a numeric range.
 *
 * Thic connectors provides a `refine()` function that accepts bounds. It will also provide
 * information about the min and max bounds for the current result set.
 * @type {Connector}
 * @param {function(RangeSliderRenderingOptions, boolean)} renderFn Rendering function for the custom **RangeSlider** widget.
 * @return {function(CustomRangeSliderWidgetOptions)} Re-usable widget factory for a custom **RangeSlider** widget.
 */
export default function connectRangeSlider(renderFn) {
  checkRendering(renderFn, usage);

  return function () {
    var widgetParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var attributeName = widgetParams.attributeName,
        minBound = widgetParams.min,
        maxBound = widgetParams.max,
        _widgetParams$precisi = widgetParams.precision,
        precision = _widgetParams$precisi === undefined ? 2 : _widgetParams$precisi;


    if (!attributeName) {
      throw new Error(usage);
    }

    var hasMinBound = _isFinite(minBound);
    var hasMaxBound = _isFinite(maxBound);

    var formatToNumber = function formatToNumber(v) {
      return Number(Number(v).toFixed(precision));
    };

    var sliderFormatter = {
      from: function from(v) {
        return v;
      },
      to: function to(v) {
        return formatToNumber(v).toLocaleString();
      }
    };

    return {
      _getCurrentRange: function _getCurrentRange() {
        var stats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var min = void 0;
        if (hasMinBound) {
          min = minBound;
        } else if (_isFinite(stats.min)) {
          min = stats.min;
        } else {
          min = 0;
        }

        var max = void 0;
        if (hasMaxBound) {
          max = maxBound;
        } else if (_isFinite(stats.max)) {
          max = stats.max;
        } else {
          max = 0;
        }

        return {
          min: Math.floor(min),
          max: Math.ceil(max)
        };
      },
      _getCurrentRefinement: function _getCurrentRefinement(helper) {
        var _ref = helper.state.getNumericRefinement(attributeName, '>=') || [],
            _ref2 = _slicedToArray(_ref, 1),
            minValue = _ref2[0];

        var _ref3 = helper.state.getNumericRefinement(attributeName, '<=') || [],
            _ref4 = _slicedToArray(_ref3, 1),
            maxValue = _ref4[0];

        var min = _isFinite(minValue) ? minValue : -Infinity;
        var max = _isFinite(maxValue) ? maxValue : Infinity;

        return [min, max];
      },
      _refine: function _refine(helper) {
        var range = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        return function () {
          var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [],
              _ref6 = _slicedToArray(_ref5, 2),
              nextMin = _ref6[0],
              nextMax = _ref6[1];

          var rangeMin = range.min,
              rangeMax = range.max;

          var _ref7 = helper.getNumericRefinement(attributeName, '>=') || [],
              _ref8 = _slicedToArray(_ref7, 1),
              min = _ref8[0];

          var _ref9 = helper.getNumericRefinement(attributeName, '<=') || [],
              _ref10 = _slicedToArray(_ref9, 1),
              max = _ref10[0];

          var newNextMin = !hasMinBound && rangeMin === nextMin ? undefined : nextMin;

          var newNextMax = !hasMaxBound && rangeMax === nextMax ? undefined : nextMax;

          if (min !== newNextMin || max !== newNextMax) {
            helper.clearRefinements(attributeName);

            var isValidMinInput = _isFinite(newNextMin);
            var isValidMinRange = _isFinite(rangeMin);
            var isGreatherThanRange = isValidMinRange && rangeMin <= newNextMin;

            if (isValidMinInput && (!isValidMinRange || isGreatherThanRange)) {
              helper.addNumericRefinement(attributeName, '>=', formatToNumber(newNextMin));
            }

            var isValidMaxInput = _isFinite(newNextMax);
            var isValidMaxRange = _isFinite(rangeMax);
            var isLowerThanRange = isValidMaxRange && rangeMax >= newNextMax;

            if (isValidMaxInput && (!isValidMaxRange || isLowerThanRange)) {
              helper.addNumericRefinement(attributeName, '<=', formatToNumber(newNextMax));
            }

            helper.search();
          }
        };
      },
      getConfiguration: function getConfiguration(currentConfiguration) {
        var configuration = {
          disjunctiveFacets: [attributeName]
        };

        var isBoundsDefined = hasMinBound || hasMaxBound;

        var boundsAlreadyDefined = currentConfiguration && currentConfiguration.numericRefinements && currentConfiguration.numericRefinements[attributeName] !== undefined;

        var isMinBoundValid = _isFinite(minBound);
        var isMaxBoundValid = _isFinite(maxBound);
        var isAbleToRefine = isMinBoundValid && isMaxBoundValid ? minBound < maxBound : isMinBoundValid || isMaxBoundValid;

        if (isBoundsDefined && !boundsAlreadyDefined && isAbleToRefine) {
          configuration.numericRefinements = _defineProperty({}, attributeName, {});

          if (hasMinBound) {
            configuration.numericRefinements[attributeName]['>='] = [minBound];
          }

          if (hasMaxBound) {
            configuration.numericRefinements[attributeName]['<='] = [maxBound];
          }
        }

        return configuration;
      },
      init: function init(_ref11) {
        var helper = _ref11.helper,
            instantSearchInstance = _ref11.instantSearchInstance;

        var stats = {};
        var range = this._getCurrentRange(stats);
        var start = this._getCurrentRefinement(helper);

        renderFn({
          // On first render pass an empty range
          // to be able to bypass the validation
          // related to it
          refine: this._refine(helper, {}),
          format: sliderFormatter,
          range: range,
          start: start,
          widgetParams: widgetParams,
          instantSearchInstance: instantSearchInstance
        }, true);
      },
      render: function render(_ref12) {
        var results = _ref12.results,
            helper = _ref12.helper,
            instantSearchInstance = _ref12.instantSearchInstance;

        var facetsFromResults = results.disjunctiveFacets || [];
        var facet = find(facetsFromResults, { name: attributeName });
        var stats = facet && facet.stats;

        var range = this._getCurrentRange(stats);
        var start = this._getCurrentRefinement(helper);

        renderFn({
          refine: this._refine(helper, range),
          format: sliderFormatter,
          range: range,
          start: start,
          widgetParams: widgetParams,
          instantSearchInstance: instantSearchInstance
        }, false);
      }
    };
  };
}